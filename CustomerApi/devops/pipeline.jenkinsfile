pipeline {
    // imagen dotnet
    agent none

    environment {
            DOTNET_CLI_HOME = "$WORKSPACE-$JOB_NAME-$BUILD_NUMBER"
            DOCKER_REPOSITORY= "mzegarra"
            APP="devops"
            APP_MODULE="customers-core"

        }
     

    stages {
        
    
        stage('Build') {
            agent {
                docker { image 'mcr.microsoft.com/dotnet/sdk:5.0' }
            }
            steps {
                sh ''' 
                    
   
    
                    dotnet --version
                   
                    cd CustomerApi
                    dotnet restore
                    dotnet publish -c Release
                    
                '''
                
                  

            }
             post{
                success {
                   archiveArtifacts artifacts: 'CustomerApi/bin/Release/net5.0/publish/*.dll', fingerprint: true,onlyIfSuccessful: true
                   archiveArtifacts artifacts: 'CustomerApi/bin/Release/net5.0/publish/*.config', fingerprint: true,onlyIfSuccessful: true
                }
            }
        }
        
        
         stage('Docker Build') {
            agent any
            steps {
            
                copyArtifacts filter: 'CustomerApi/bin/Release/net5.0/publish/',
                              fingerprintArtifacts: true,
                              projectName: '${JOB_NAME}',
                              flatten: true,
                              selector: specific('${BUILD_NUMBER}'),
                              target: 'target';
          
            }
         }
        
    }
}

//#docker build --file ./CustomerApi/devops/Dockerfile01 --tag $DOCKER_REPOSITORY/$APP-$APP_MODULE:${BUILD_NUMBER} ./CustomerApi
//dotnet publish -c Release -o $WORKSPACE-$JOB_NAME-$BUILD_NUMBER/out && \
//                    rm -fr $WORKSPACE-$JOB_NAME-$BUILD_NUMBER/out/appsettings.json $WORKSPACE-$JOB_NAME-$BUILD_NUMBER/out/appsettings.Development.json
